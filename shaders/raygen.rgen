#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : require

#include "random.h"
#include "shaderCommon.h"

const int MAX_MATERIALS = 100;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0) uniform sampler2D gbuffers[]; // 0 = position, 1 = normal, 2 = albedo
layout(binding = 2, set = 0, rgba8) uniform image2D image;
layout(binding = 3, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 position;
} cam;

layout( push_constant ) uniform RtPushConstant {
	int frame;
} pushConstant;

layout(location = 0) rayPayloadEXT RayPayload prd;

const uint MAX_RECURSION = 10;

void main() 
{
	prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pushConstant.frame);

	
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	vec2 gbufferUV = vec2(pixelCenter.x / gl_LaunchSizeEXT.x, pixelCenter.y / gl_LaunchSizeEXT.y);
	
	ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);

	/*
	vec4 position = imageLoad(gbuffers[0], pixel);
	vec4 normal = imageLoad(gbuffers[1], pixel);
	vec4 albedo = vec4(imageLoad(gbuffers[2], pixel).xyz, 1.0);
	int matIdx = int(imageLoad(gbuffers[2], pixel).w * MAX_MATERIALS);
	*/

	vec4 albedo = texture(gbuffers[2], gbufferUV);

	//prd.direction.xyz = vec3(0);

	float tmin = 0.001;
	float tmax = 10000.0;

	//vec4 origin = position;
	//origin.w = 1;
    vec3 finalColor = vec3(0.0);
	finalColor = albedo.xyz;
	/*
	for(int i = 0; i < MAX_RECURSION; i++)
	{		
	    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

		const vec3 hitColor = prd.color_dist.xyz;
		const float dist = prd.color_dist.w;
		const bool bounce = prd.direction.w > 0;
		const bool ignoredHit = prd.origin.w >= 0 && prd.origin.w < 0.001;

		if (dist < 0.0f) { //miss
			finalColor += hitColor;
			break;
		}
		else if(ignoredHit)
		{
			// continue the ray
			// reset the parameter that tells us if the hit was ignored
			origin.xyz = prd.origin.xyz;
			prd.origin.w = 1;
		}
		else if(!bounce) //diffuse
		{
			finalColor += hitColor;
			vec3 N = prd.direction.xyz;
			origin.xyz = prd.origin.xyz + prd.direction.xyz * 0.001;
			direction.xyz = N;
			break;
		}
	}
	*/
	/*
	// Do accumulation over time
	if(pushConstant.frame > 0)
	{
		float a         = 1.0f / float(pushConstant.frame + 1);
		vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, finalColor, a), 1.0f));
	}
	else
	{
		// First frame, replace the value in the buffer
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0f));
	}
	*/

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalColor, 1.0f));
}